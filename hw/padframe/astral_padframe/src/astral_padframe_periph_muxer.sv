
// File auto-generated by Padrick unknown
module astral_padframe_periph_muxer
  import pkg_internal_astral_padframe_periph::*;
  import pkg_astral_padframe::*;
  import astral_padframe_periph_config_reg_pkg::*;
#(
  parameter type              req_t  = logic, // reg_interface request type
  parameter type             resp_t  = logic // reg_interface response type
) (
  input logic clk_i,
  input logic rst_ni,
  input pad_domain_periph_ports_soc2pad_t port_signals_soc2pad_i,
  output pad_domain_periph_ports_pad2soc_t port_signals_pad2soc_o,
  output mux_to_pads_t mux_to_pads_o,
  input pads_to_mux_t pads_to_mux_i,
  // Configuration interface using register_interface protocol
  input req_t config_req_i,
  output resp_t config_rsp_o
);
   // Connections between register file and pads
     astral_padframe_periph_config_reg2hw_t s_reg2hw;

  // Register File Instantiation
  astral_padframe_periph_config_reg_top #(
    .reg_req_t(req_t),
    .reg_rsp_t(resp_t)
    ) i_regfile (
    .clk_i,
    .rst_ni,
    .reg2hw(s_reg2hw),
    .reg_req_i(config_req_i),
    .reg_rsp_o(config_rsp_o),
    .devmode_i(1'b1)
  );


   // SoC -> Pad Multiplex Logic
   // Pad muxed_v_00
   always_comb begin
     unique case (s_reg2hw.muxed_v_00_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_00_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_00.chip2pad = s_reg2hw.muxed_v_00_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_00.input_en = s_reg2hw.muxed_v_00_cfg.input_en.q;
         mux_to_pads_o.muxed_v_00.output_en = s_reg2hw.muxed_v_00_cfg.output_en.q;
         mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_00_SEL_SPI_SCK: begin
          mux_to_pads_o.muxed_v_00.chip2pad = port_signals_soc2pad_i.spi.spih_sck_o;
          mux_to_pads_o.muxed_v_00.input_en = 1'b0;
          mux_to_pads_o.muxed_v_00.output_en = 1'b1;
          mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_00_SEL_CAN_RX: begin
          mux_to_pads_o.muxed_v_00.chip2pad = s_reg2hw.muxed_v_00_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_00.input_en = 1'b1;
          mux_to_pads_o.muxed_v_00.output_en = 1'b0;
          mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_00_SEL_I2C_SDA: begin
          mux_to_pads_o.muxed_v_00.chip2pad = port_signals_soc2pad_i.i2c.i2c_sda_o;
          mux_to_pads_o.muxed_v_00.input_en = ~port_signals_soc2pad_i.i2c.i2c_sda_oen_i;
          mux_to_pads_o.muxed_v_00.output_en = port_signals_soc2pad_i.i2c.i2c_sda_oen_i;
          mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_00_SEL_SPI_OT_SCK: begin
          mux_to_pads_o.muxed_v_00.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_sck_o;
          mux_to_pads_o.muxed_v_00.input_en = 1'b0;
          mux_to_pads_o.muxed_v_00.output_en = 1'b1;
          mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_00_SEL_GPIO_IO_V_0: begin
          mux_to_pads_o.muxed_v_00.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_0_o;
          mux_to_pads_o.muxed_v_00.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_0_oen_i;
          mux_to_pads_o.muxed_v_00.output_en = port_signals_soc2pad_i.gpio.gpio_v_0_oen_i;
          mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_00.chip2pad = s_reg2hw.muxed_v_00_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_00.input_en = s_reg2hw.muxed_v_00_cfg.input_en.q;
         mux_to_pads_o.muxed_v_00.output_en = s_reg2hw.muxed_v_00_cfg.output_en.q;
         mux_to_pads_o.muxed_v_00.pull_en = s_reg2hw.muxed_v_00_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_00.pull_sel = s_reg2hw.muxed_v_00_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_01
   always_comb begin
     unique case (s_reg2hw.muxed_v_01_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_01_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_01.chip2pad = s_reg2hw.muxed_v_01_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_01.input_en = s_reg2hw.muxed_v_01_cfg.input_en.q;
         mux_to_pads_o.muxed_v_01.output_en = s_reg2hw.muxed_v_01_cfg.output_en.q;
         mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_01_SEL_SPI_CSB_0: begin
          mux_to_pads_o.muxed_v_01.chip2pad = port_signals_soc2pad_i.spi.spih_csb_0_o;
          mux_to_pads_o.muxed_v_01.input_en = 1'b0;
          mux_to_pads_o.muxed_v_01.output_en = 1'b1;
          mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_01_SEL_CAN_TX: begin
          mux_to_pads_o.muxed_v_01.chip2pad = port_signals_soc2pad_i.can.can_tx_o;
          mux_to_pads_o.muxed_v_01.input_en = 1'b0;
          mux_to_pads_o.muxed_v_01.output_en = 1'b1;
          mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_01_SEL_I2C_SCL: begin
          mux_to_pads_o.muxed_v_01.chip2pad = port_signals_soc2pad_i.i2c.i2c_scl_o;
          mux_to_pads_o.muxed_v_01.input_en = ~port_signals_soc2pad_i.i2c.i2c_scl_oen_i;
          mux_to_pads_o.muxed_v_01.output_en = port_signals_soc2pad_i.i2c.i2c_scl_oen_i;
          mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_01_SEL_SPI_OT_CSB: begin
          mux_to_pads_o.muxed_v_01.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_csb_o;
          mux_to_pads_o.muxed_v_01.input_en = 1'b0;
          mux_to_pads_o.muxed_v_01.output_en = 1'b1;
          mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_01_SEL_GPIO_IO_V_1: begin
          mux_to_pads_o.muxed_v_01.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_1_o;
          mux_to_pads_o.muxed_v_01.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_1_oen_i;
          mux_to_pads_o.muxed_v_01.output_en = port_signals_soc2pad_i.gpio.gpio_v_1_oen_i;
          mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_01.chip2pad = s_reg2hw.muxed_v_01_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_01.input_en = s_reg2hw.muxed_v_01_cfg.input_en.q;
         mux_to_pads_o.muxed_v_01.output_en = s_reg2hw.muxed_v_01_cfg.output_en.q;
         mux_to_pads_o.muxed_v_01.pull_en = s_reg2hw.muxed_v_01_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_01.pull_sel = s_reg2hw.muxed_v_01_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_02
   always_comb begin
     unique case (s_reg2hw.muxed_v_02_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_02_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_02.chip2pad = s_reg2hw.muxed_v_02_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_02.input_en = s_reg2hw.muxed_v_02_cfg.input_en.q;
         mux_to_pads_o.muxed_v_02.output_en = s_reg2hw.muxed_v_02_cfg.output_en.q;
         mux_to_pads_o.muxed_v_02.pull_en = s_reg2hw.muxed_v_02_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_02.pull_sel = s_reg2hw.muxed_v_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_02_SEL_SPI_CSB_1: begin
          mux_to_pads_o.muxed_v_02.chip2pad = port_signals_soc2pad_i.spi.spih_csb_1_o;
          mux_to_pads_o.muxed_v_02.input_en = 1'b0;
          mux_to_pads_o.muxed_v_02.output_en = 1'b1;
          mux_to_pads_o.muxed_v_02.pull_en = s_reg2hw.muxed_v_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_02.pull_sel = s_reg2hw.muxed_v_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_02_SEL_SPI_OT_SD_0: begin
          mux_to_pads_o.muxed_v_02.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_sd_0_o;
          mux_to_pads_o.muxed_v_02.input_en = ~port_signals_soc2pad_i.spi_ot.spih_ot_sd_0_oen_i;
          mux_to_pads_o.muxed_v_02.output_en = port_signals_soc2pad_i.spi_ot.spih_ot_sd_0_oen_i;
          mux_to_pads_o.muxed_v_02.pull_en = s_reg2hw.muxed_v_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_02.pull_sel = s_reg2hw.muxed_v_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_02_SEL_GPIO_IO_V_2: begin
          mux_to_pads_o.muxed_v_02.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_2_o;
          mux_to_pads_o.muxed_v_02.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_2_oen_i;
          mux_to_pads_o.muxed_v_02.output_en = port_signals_soc2pad_i.gpio.gpio_v_2_oen_i;
          mux_to_pads_o.muxed_v_02.pull_en = s_reg2hw.muxed_v_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_02.pull_sel = s_reg2hw.muxed_v_02_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_02.chip2pad = s_reg2hw.muxed_v_02_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_02.input_en = s_reg2hw.muxed_v_02_cfg.input_en.q;
         mux_to_pads_o.muxed_v_02.output_en = s_reg2hw.muxed_v_02_cfg.output_en.q;
         mux_to_pads_o.muxed_v_02.pull_en = s_reg2hw.muxed_v_02_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_02.pull_sel = s_reg2hw.muxed_v_02_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_03
   always_comb begin
     unique case (s_reg2hw.muxed_v_03_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_03_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_03.chip2pad = s_reg2hw.muxed_v_03_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_03.input_en = s_reg2hw.muxed_v_03_cfg.input_en.q;
         mux_to_pads_o.muxed_v_03.output_en = s_reg2hw.muxed_v_03_cfg.output_en.q;
         mux_to_pads_o.muxed_v_03.pull_en = s_reg2hw.muxed_v_03_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_03.pull_sel = s_reg2hw.muxed_v_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_03_SEL_SPI_SD_0: begin
          mux_to_pads_o.muxed_v_03.chip2pad = port_signals_soc2pad_i.spi.spih_sd_0_o;
          mux_to_pads_o.muxed_v_03.input_en = ~port_signals_soc2pad_i.spi.spih_sd_0_oen_i;
          mux_to_pads_o.muxed_v_03.output_en = port_signals_soc2pad_i.spi.spih_sd_0_oen_i;
          mux_to_pads_o.muxed_v_03.pull_en = s_reg2hw.muxed_v_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_03.pull_sel = s_reg2hw.muxed_v_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_03_SEL_SPI_OT_SD_1: begin
          mux_to_pads_o.muxed_v_03.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_sd_1_o;
          mux_to_pads_o.muxed_v_03.input_en = ~port_signals_soc2pad_i.spi_ot.spih_ot_sd_1_oen_i;
          mux_to_pads_o.muxed_v_03.output_en = port_signals_soc2pad_i.spi_ot.spih_ot_sd_1_oen_i;
          mux_to_pads_o.muxed_v_03.pull_en = s_reg2hw.muxed_v_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_03.pull_sel = s_reg2hw.muxed_v_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_03_SEL_GPIO_IO_V_3: begin
          mux_to_pads_o.muxed_v_03.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_3_o;
          mux_to_pads_o.muxed_v_03.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_3_oen_i;
          mux_to_pads_o.muxed_v_03.output_en = port_signals_soc2pad_i.gpio.gpio_v_3_oen_i;
          mux_to_pads_o.muxed_v_03.pull_en = s_reg2hw.muxed_v_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_03.pull_sel = s_reg2hw.muxed_v_03_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_03.chip2pad = s_reg2hw.muxed_v_03_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_03.input_en = s_reg2hw.muxed_v_03_cfg.input_en.q;
         mux_to_pads_o.muxed_v_03.output_en = s_reg2hw.muxed_v_03_cfg.output_en.q;
         mux_to_pads_o.muxed_v_03.pull_en = s_reg2hw.muxed_v_03_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_03.pull_sel = s_reg2hw.muxed_v_03_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_04
   always_comb begin
     unique case (s_reg2hw.muxed_v_04_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_04_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_04.chip2pad = s_reg2hw.muxed_v_04_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_04.input_en = s_reg2hw.muxed_v_04_cfg.input_en.q;
         mux_to_pads_o.muxed_v_04.output_en = s_reg2hw.muxed_v_04_cfg.output_en.q;
         mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_04_SEL_SPI_SD_1: begin
          mux_to_pads_o.muxed_v_04.chip2pad = port_signals_soc2pad_i.spi.spih_sd_1_o;
          mux_to_pads_o.muxed_v_04.input_en = ~port_signals_soc2pad_i.spi.spih_sd_1_oen_i;
          mux_to_pads_o.muxed_v_04.output_en = port_signals_soc2pad_i.spi.spih_sd_1_oen_i;
          mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_04_SEL_SERIAL_LINK_RCV_CLK_I: begin
          mux_to_pads_o.muxed_v_04.chip2pad = s_reg2hw.muxed_v_04_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_04.input_en = 1'b1;
          mux_to_pads_o.muxed_v_04.output_en = 1'b0;
          mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_04_SEL_SPI_OT_SD_2: begin
          mux_to_pads_o.muxed_v_04.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_sd_2_o;
          mux_to_pads_o.muxed_v_04.input_en = ~port_signals_soc2pad_i.spi_ot.spih_ot_sd_2_oen_i;
          mux_to_pads_o.muxed_v_04.output_en = port_signals_soc2pad_i.spi_ot.spih_ot_sd_2_oen_i;
          mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_04_SEL_GPIO_IO_V_4: begin
          mux_to_pads_o.muxed_v_04.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_4_o;
          mux_to_pads_o.muxed_v_04.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_4_oen_i;
          mux_to_pads_o.muxed_v_04.output_en = port_signals_soc2pad_i.gpio.gpio_v_4_oen_i;
          mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_04.chip2pad = s_reg2hw.muxed_v_04_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_04.input_en = s_reg2hw.muxed_v_04_cfg.input_en.q;
         mux_to_pads_o.muxed_v_04.output_en = s_reg2hw.muxed_v_04_cfg.output_en.q;
         mux_to_pads_o.muxed_v_04.pull_en = s_reg2hw.muxed_v_04_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_04.pull_sel = s_reg2hw.muxed_v_04_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_05
   always_comb begin
     unique case (s_reg2hw.muxed_v_05_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_05_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_05.chip2pad = s_reg2hw.muxed_v_05_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_05.input_en = s_reg2hw.muxed_v_05_cfg.input_en.q;
         mux_to_pads_o.muxed_v_05.output_en = s_reg2hw.muxed_v_05_cfg.output_en.q;
         mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_05_SEL_SPI_SD_2: begin
          mux_to_pads_o.muxed_v_05.chip2pad = port_signals_soc2pad_i.spi.spih_sd_2_o;
          mux_to_pads_o.muxed_v_05.input_en = ~port_signals_soc2pad_i.spi.spih_sd_2_oen_i;
          mux_to_pads_o.muxed_v_05.output_en = port_signals_soc2pad_i.spi.spih_sd_2_oen_i;
          mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_05_SEL_SERIAL_LINK_I_0: begin
          mux_to_pads_o.muxed_v_05.chip2pad = s_reg2hw.muxed_v_05_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_05.input_en = 1'b1;
          mux_to_pads_o.muxed_v_05.output_en = 1'b0;
          mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_05_SEL_SPI_OT_SD_3: begin
          mux_to_pads_o.muxed_v_05.chip2pad = port_signals_soc2pad_i.spi_ot.spih_ot_sd_3_o;
          mux_to_pads_o.muxed_v_05.input_en = ~port_signals_soc2pad_i.spi_ot.spih_ot_sd_3_oen_i;
          mux_to_pads_o.muxed_v_05.output_en = port_signals_soc2pad_i.spi_ot.spih_ot_sd_3_oen_i;
          mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_05_SEL_GPIO_IO_V_5: begin
          mux_to_pads_o.muxed_v_05.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_5_o;
          mux_to_pads_o.muxed_v_05.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_5_oen_i;
          mux_to_pads_o.muxed_v_05.output_en = port_signals_soc2pad_i.gpio.gpio_v_5_oen_i;
          mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_05.chip2pad = s_reg2hw.muxed_v_05_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_05.input_en = s_reg2hw.muxed_v_05_cfg.input_en.q;
         mux_to_pads_o.muxed_v_05.output_en = s_reg2hw.muxed_v_05_cfg.output_en.q;
         mux_to_pads_o.muxed_v_05.pull_en = s_reg2hw.muxed_v_05_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_05.pull_sel = s_reg2hw.muxed_v_05_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_06
   always_comb begin
     unique case (s_reg2hw.muxed_v_06_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_06_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_06.chip2pad = s_reg2hw.muxed_v_06_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_06.input_en = s_reg2hw.muxed_v_06_cfg.input_en.q;
         mux_to_pads_o.muxed_v_06.output_en = s_reg2hw.muxed_v_06_cfg.output_en.q;
         mux_to_pads_o.muxed_v_06.pull_en = s_reg2hw.muxed_v_06_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_06.pull_sel = s_reg2hw.muxed_v_06_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_06_SEL_SPI_SD_3: begin
          mux_to_pads_o.muxed_v_06.chip2pad = port_signals_soc2pad_i.spi.spih_sd_3_o;
          mux_to_pads_o.muxed_v_06.input_en = ~port_signals_soc2pad_i.spi.spih_sd_3_oen_i;
          mux_to_pads_o.muxed_v_06.output_en = port_signals_soc2pad_i.spi.spih_sd_3_oen_i;
          mux_to_pads_o.muxed_v_06.pull_en = s_reg2hw.muxed_v_06_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_06.pull_sel = s_reg2hw.muxed_v_06_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_06_SEL_SERIAL_LINK_I_1: begin
          mux_to_pads_o.muxed_v_06.chip2pad = s_reg2hw.muxed_v_06_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_06.input_en = 1'b1;
          mux_to_pads_o.muxed_v_06.output_en = 1'b0;
          mux_to_pads_o.muxed_v_06.pull_en = s_reg2hw.muxed_v_06_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_06.pull_sel = s_reg2hw.muxed_v_06_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_06_SEL_GPIO_IO_V_6: begin
          mux_to_pads_o.muxed_v_06.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_6_o;
          mux_to_pads_o.muxed_v_06.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_6_oen_i;
          mux_to_pads_o.muxed_v_06.output_en = port_signals_soc2pad_i.gpio.gpio_v_6_oen_i;
          mux_to_pads_o.muxed_v_06.pull_en = s_reg2hw.muxed_v_06_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_06.pull_sel = s_reg2hw.muxed_v_06_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_06.chip2pad = s_reg2hw.muxed_v_06_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_06.input_en = s_reg2hw.muxed_v_06_cfg.input_en.q;
         mux_to_pads_o.muxed_v_06.output_en = s_reg2hw.muxed_v_06_cfg.output_en.q;
         mux_to_pads_o.muxed_v_06.pull_en = s_reg2hw.muxed_v_06_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_06.pull_sel = s_reg2hw.muxed_v_06_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_07
   always_comb begin
     unique case (s_reg2hw.muxed_v_07_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_07_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_07.chip2pad = s_reg2hw.muxed_v_07_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_07.input_en = s_reg2hw.muxed_v_07_cfg.input_en.q;
         mux_to_pads_o.muxed_v_07.output_en = s_reg2hw.muxed_v_07_cfg.output_en.q;
         mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_07_SEL_ETHERNET_RXCK: begin
          mux_to_pads_o.muxed_v_07.chip2pad = s_reg2hw.muxed_v_07_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_07.input_en = 1'b1;
          mux_to_pads_o.muxed_v_07.output_en = 1'b0;
          mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_07_SEL_SERIAL_LINK_I_2: begin
          mux_to_pads_o.muxed_v_07.chip2pad = s_reg2hw.muxed_v_07_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_07.input_en = 1'b1;
          mux_to_pads_o.muxed_v_07.output_en = 1'b0;
          mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_07_SEL_TC_ACTIVE: begin
          mux_to_pads_o.muxed_v_07.chip2pad = s_reg2hw.muxed_v_07_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_07.input_en = 1'b1;
          mux_to_pads_o.muxed_v_07.output_en = 1'b0;
          mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_07_SEL_PLL_IO_0: begin
          mux_to_pads_o.muxed_v_07.chip2pad = port_signals_soc2pad_i.pll.pll_0_o;
          mux_to_pads_o.muxed_v_07.input_en = ~port_signals_soc2pad_i.pll.pll_0_oen_i;
          mux_to_pads_o.muxed_v_07.output_en = port_signals_soc2pad_i.pll.pll_0_oen_i;
          mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_07_SEL_GPIO_IO_V_7: begin
          mux_to_pads_o.muxed_v_07.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_7_o;
          mux_to_pads_o.muxed_v_07.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_7_oen_i;
          mux_to_pads_o.muxed_v_07.output_en = port_signals_soc2pad_i.gpio.gpio_v_7_oen_i;
          mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_07.chip2pad = s_reg2hw.muxed_v_07_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_07.input_en = s_reg2hw.muxed_v_07_cfg.input_en.q;
         mux_to_pads_o.muxed_v_07.output_en = s_reg2hw.muxed_v_07_cfg.output_en.q;
         mux_to_pads_o.muxed_v_07.pull_en = s_reg2hw.muxed_v_07_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_07.pull_sel = s_reg2hw.muxed_v_07_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_08
   always_comb begin
     unique case (s_reg2hw.muxed_v_08_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_08_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_08.chip2pad = s_reg2hw.muxed_v_08_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_08.input_en = s_reg2hw.muxed_v_08_cfg.input_en.q;
         mux_to_pads_o.muxed_v_08.output_en = s_reg2hw.muxed_v_08_cfg.output_en.q;
         mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_08_SEL_ETHERNET_RXCTL: begin
          mux_to_pads_o.muxed_v_08.chip2pad = s_reg2hw.muxed_v_08_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_08.input_en = 1'b1;
          mux_to_pads_o.muxed_v_08.output_en = 1'b0;
          mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_08_SEL_SERIAL_LINK_I_3: begin
          mux_to_pads_o.muxed_v_08.chip2pad = s_reg2hw.muxed_v_08_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_08.input_en = 1'b1;
          mux_to_pads_o.muxed_v_08.output_en = 1'b0;
          mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_08_SEL_TC_CLK: begin
          mux_to_pads_o.muxed_v_08.chip2pad = s_reg2hw.muxed_v_08_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_08.input_en = 1'b1;
          mux_to_pads_o.muxed_v_08.output_en = 1'b0;
          mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_08_SEL_PLL_IO_1: begin
          mux_to_pads_o.muxed_v_08.chip2pad = port_signals_soc2pad_i.pll.pll_1_o;
          mux_to_pads_o.muxed_v_08.input_en = ~port_signals_soc2pad_i.pll.pll_1_oen_i;
          mux_to_pads_o.muxed_v_08.output_en = port_signals_soc2pad_i.pll.pll_1_oen_i;
          mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_08_SEL_GPIO_IO_V_8: begin
          mux_to_pads_o.muxed_v_08.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_8_o;
          mux_to_pads_o.muxed_v_08.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_8_oen_i;
          mux_to_pads_o.muxed_v_08.output_en = port_signals_soc2pad_i.gpio.gpio_v_8_oen_i;
          mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_08.chip2pad = s_reg2hw.muxed_v_08_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_08.input_en = s_reg2hw.muxed_v_08_cfg.input_en.q;
         mux_to_pads_o.muxed_v_08.output_en = s_reg2hw.muxed_v_08_cfg.output_en.q;
         mux_to_pads_o.muxed_v_08.pull_en = s_reg2hw.muxed_v_08_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_08.pull_sel = s_reg2hw.muxed_v_08_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_09
   always_comb begin
     unique case (s_reg2hw.muxed_v_09_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_09_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_09.chip2pad = s_reg2hw.muxed_v_09_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_09.input_en = s_reg2hw.muxed_v_09_cfg.input_en.q;
         mux_to_pads_o.muxed_v_09.output_en = s_reg2hw.muxed_v_09_cfg.output_en.q;
         mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_09_SEL_ETHERNET_RXD_0: begin
          mux_to_pads_o.muxed_v_09.chip2pad = s_reg2hw.muxed_v_09_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_09.input_en = 1'b1;
          mux_to_pads_o.muxed_v_09.output_en = 1'b0;
          mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_09_SEL_SERIAL_LINK_I_4: begin
          mux_to_pads_o.muxed_v_09.chip2pad = s_reg2hw.muxed_v_09_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_09.input_en = 1'b1;
          mux_to_pads_o.muxed_v_09.output_en = 1'b0;
          mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_09_SEL_TC_DATA: begin
          mux_to_pads_o.muxed_v_09.chip2pad = s_reg2hw.muxed_v_09_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_09.input_en = 1'b1;
          mux_to_pads_o.muxed_v_09.output_en = 1'b0;
          mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_09_SEL_PLL_IO_2: begin
          mux_to_pads_o.muxed_v_09.chip2pad = port_signals_soc2pad_i.pll.pll_2_o;
          mux_to_pads_o.muxed_v_09.input_en = ~port_signals_soc2pad_i.pll.pll_2_oen_i;
          mux_to_pads_o.muxed_v_09.output_en = port_signals_soc2pad_i.pll.pll_2_oen_i;
          mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_09_SEL_GPIO_IO_V_9: begin
          mux_to_pads_o.muxed_v_09.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_9_o;
          mux_to_pads_o.muxed_v_09.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_9_oen_i;
          mux_to_pads_o.muxed_v_09.output_en = port_signals_soc2pad_i.gpio.gpio_v_9_oen_i;
          mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_09.chip2pad = s_reg2hw.muxed_v_09_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_09.input_en = s_reg2hw.muxed_v_09_cfg.input_en.q;
         mux_to_pads_o.muxed_v_09.output_en = s_reg2hw.muxed_v_09_cfg.output_en.q;
         mux_to_pads_o.muxed_v_09.pull_en = s_reg2hw.muxed_v_09_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_09.pull_sel = s_reg2hw.muxed_v_09_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_10
   always_comb begin
     unique case (s_reg2hw.muxed_v_10_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_10_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_10.chip2pad = s_reg2hw.muxed_v_10_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_10.input_en = s_reg2hw.muxed_v_10_cfg.input_en.q;
         mux_to_pads_o.muxed_v_10.output_en = s_reg2hw.muxed_v_10_cfg.output_en.q;
         mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_10_SEL_ETHERNET_RXD_1: begin
          mux_to_pads_o.muxed_v_10.chip2pad = s_reg2hw.muxed_v_10_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_10.input_en = 1'b1;
          mux_to_pads_o.muxed_v_10.output_en = 1'b0;
          mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_10_SEL_SERIAL_LINK_I_5: begin
          mux_to_pads_o.muxed_v_10.chip2pad = s_reg2hw.muxed_v_10_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_10.input_en = 1'b1;
          mux_to_pads_o.muxed_v_10.output_en = 1'b0;
          mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_10_SEL_PTME_CLK: begin
          mux_to_pads_o.muxed_v_10.chip2pad = port_signals_soc2pad_i.ptme.ptme_clk_o;
          mux_to_pads_o.muxed_v_10.input_en = 1'b0;
          mux_to_pads_o.muxed_v_10.output_en = 1'b1;
          mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_10_SEL_PLL_IO_3: begin
          mux_to_pads_o.muxed_v_10.chip2pad = port_signals_soc2pad_i.pll.pll_3_o;
          mux_to_pads_o.muxed_v_10.input_en = ~port_signals_soc2pad_i.pll.pll_3_oen_i;
          mux_to_pads_o.muxed_v_10.output_en = port_signals_soc2pad_i.pll.pll_3_oen_i;
          mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_10_SEL_GPIO_IO_V_10: begin
          mux_to_pads_o.muxed_v_10.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_10_o;
          mux_to_pads_o.muxed_v_10.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_10_oen_i;
          mux_to_pads_o.muxed_v_10.output_en = port_signals_soc2pad_i.gpio.gpio_v_10_oen_i;
          mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_10.chip2pad = s_reg2hw.muxed_v_10_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_10.input_en = s_reg2hw.muxed_v_10_cfg.input_en.q;
         mux_to_pads_o.muxed_v_10.output_en = s_reg2hw.muxed_v_10_cfg.output_en.q;
         mux_to_pads_o.muxed_v_10.pull_en = s_reg2hw.muxed_v_10_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_10.pull_sel = s_reg2hw.muxed_v_10_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_11
   always_comb begin
     unique case (s_reg2hw.muxed_v_11_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_11_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_11.chip2pad = s_reg2hw.muxed_v_11_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_11.input_en = s_reg2hw.muxed_v_11_cfg.input_en.q;
         mux_to_pads_o.muxed_v_11.output_en = s_reg2hw.muxed_v_11_cfg.output_en.q;
         mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_11_SEL_ETHERNET_RXD_2: begin
          mux_to_pads_o.muxed_v_11.chip2pad = s_reg2hw.muxed_v_11_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_11.input_en = 1'b1;
          mux_to_pads_o.muxed_v_11.output_en = 1'b0;
          mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_11_SEL_SERIAL_LINK_I_6: begin
          mux_to_pads_o.muxed_v_11.chip2pad = s_reg2hw.muxed_v_11_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_11.input_en = 1'b1;
          mux_to_pads_o.muxed_v_11.output_en = 1'b0;
          mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_11_SEL_PTME_ENC: begin
          mux_to_pads_o.muxed_v_11.chip2pad = port_signals_soc2pad_i.ptme.ptme_enc_o;
          mux_to_pads_o.muxed_v_11.input_en = 1'b0;
          mux_to_pads_o.muxed_v_11.output_en = 1'b1;
          mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_11_SEL_PLL_IO_4: begin
          mux_to_pads_o.muxed_v_11.chip2pad = port_signals_soc2pad_i.pll.pll_4_o;
          mux_to_pads_o.muxed_v_11.input_en = ~port_signals_soc2pad_i.pll.pll_4_oen_i;
          mux_to_pads_o.muxed_v_11.output_en = port_signals_soc2pad_i.pll.pll_4_oen_i;
          mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_11_SEL_GPIO_IO_V_11: begin
          mux_to_pads_o.muxed_v_11.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_11_o;
          mux_to_pads_o.muxed_v_11.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_11_oen_i;
          mux_to_pads_o.muxed_v_11.output_en = port_signals_soc2pad_i.gpio.gpio_v_11_oen_i;
          mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_11.chip2pad = s_reg2hw.muxed_v_11_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_11.input_en = s_reg2hw.muxed_v_11_cfg.input_en.q;
         mux_to_pads_o.muxed_v_11.output_en = s_reg2hw.muxed_v_11_cfg.output_en.q;
         mux_to_pads_o.muxed_v_11.pull_en = s_reg2hw.muxed_v_11_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_11.pull_sel = s_reg2hw.muxed_v_11_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_12
   always_comb begin
     unique case (s_reg2hw.muxed_v_12_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_12_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_12.chip2pad = s_reg2hw.muxed_v_12_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_12.input_en = s_reg2hw.muxed_v_12_cfg.input_en.q;
         mux_to_pads_o.muxed_v_12.output_en = s_reg2hw.muxed_v_12_cfg.output_en.q;
         mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_12_SEL_ETHERNET_RXD_3: begin
          mux_to_pads_o.muxed_v_12.chip2pad = s_reg2hw.muxed_v_12_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_12.input_en = 1'b1;
          mux_to_pads_o.muxed_v_12.output_en = 1'b0;
          mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_12_SEL_SERIAL_LINK_I_7: begin
          mux_to_pads_o.muxed_v_12.chip2pad = s_reg2hw.muxed_v_12_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_12.input_en = 1'b1;
          mux_to_pads_o.muxed_v_12.output_en = 1'b0;
          mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_12_SEL_PTME_SYNC: begin
          mux_to_pads_o.muxed_v_12.chip2pad = port_signals_soc2pad_i.ptme.ptme_sync_o;
          mux_to_pads_o.muxed_v_12.input_en = 1'b0;
          mux_to_pads_o.muxed_v_12.output_en = 1'b1;
          mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_12_SEL_PLL_IO_5: begin
          mux_to_pads_o.muxed_v_12.chip2pad = port_signals_soc2pad_i.pll.pll_5_o;
          mux_to_pads_o.muxed_v_12.input_en = ~port_signals_soc2pad_i.pll.pll_5_oen_i;
          mux_to_pads_o.muxed_v_12.output_en = port_signals_soc2pad_i.pll.pll_5_oen_i;
          mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_12_SEL_GPIO_IO_V_12: begin
          mux_to_pads_o.muxed_v_12.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_12_o;
          mux_to_pads_o.muxed_v_12.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_12_oen_i;
          mux_to_pads_o.muxed_v_12.output_en = port_signals_soc2pad_i.gpio.gpio_v_12_oen_i;
          mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_12.chip2pad = s_reg2hw.muxed_v_12_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_12.input_en = s_reg2hw.muxed_v_12_cfg.input_en.q;
         mux_to_pads_o.muxed_v_12.output_en = s_reg2hw.muxed_v_12_cfg.output_en.q;
         mux_to_pads_o.muxed_v_12.pull_en = s_reg2hw.muxed_v_12_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_12.pull_sel = s_reg2hw.muxed_v_12_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_13
   always_comb begin
     unique case (s_reg2hw.muxed_v_13_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_13_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_13.chip2pad = s_reg2hw.muxed_v_13_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_13.input_en = s_reg2hw.muxed_v_13_cfg.input_en.q;
         mux_to_pads_o.muxed_v_13.output_en = s_reg2hw.muxed_v_13_cfg.output_en.q;
         mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_13_SEL_ETHERNET_TXCK: begin
          mux_to_pads_o.muxed_v_13.chip2pad = port_signals_soc2pad_i.ethernet.eth_txck_o;
          mux_to_pads_o.muxed_v_13.input_en = 1'b0;
          mux_to_pads_o.muxed_v_13.output_en = 1'b1;
          mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_13_SEL_SERIAL_LINK_RCV_CLK_O: begin
          mux_to_pads_o.muxed_v_13.chip2pad = port_signals_soc2pad_i.serial_link.slink_rcv_clk_o;
          mux_to_pads_o.muxed_v_13.input_en = 1'b0;
          mux_to_pads_o.muxed_v_13.output_en = 1'b1;
          mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_13_SEL_PTME_EXT_CLK: begin
          mux_to_pads_o.muxed_v_13.chip2pad = s_reg2hw.muxed_v_13_cfg.chip2pad.q;
          mux_to_pads_o.muxed_v_13.input_en = 1'b1;
          mux_to_pads_o.muxed_v_13.output_en = 1'b0;
          mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_13_SEL_PLL_IO_6: begin
          mux_to_pads_o.muxed_v_13.chip2pad = port_signals_soc2pad_i.pll.pll_6_o;
          mux_to_pads_o.muxed_v_13.input_en = ~port_signals_soc2pad_i.pll.pll_6_oen_i;
          mux_to_pads_o.muxed_v_13.output_en = port_signals_soc2pad_i.pll.pll_6_oen_i;
          mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_13_SEL_GPIO_IO_V_13: begin
          mux_to_pads_o.muxed_v_13.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_13_o;
          mux_to_pads_o.muxed_v_13.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_13_oen_i;
          mux_to_pads_o.muxed_v_13.output_en = port_signals_soc2pad_i.gpio.gpio_v_13_oen_i;
          mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_13.chip2pad = s_reg2hw.muxed_v_13_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_13.input_en = s_reg2hw.muxed_v_13_cfg.input_en.q;
         mux_to_pads_o.muxed_v_13.output_en = s_reg2hw.muxed_v_13_cfg.output_en.q;
         mux_to_pads_o.muxed_v_13.pull_en = s_reg2hw.muxed_v_13_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_13.pull_sel = s_reg2hw.muxed_v_13_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_14
   always_comb begin
     unique case (s_reg2hw.muxed_v_14_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_14_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_14.chip2pad = s_reg2hw.muxed_v_14_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_14.input_en = s_reg2hw.muxed_v_14_cfg.input_en.q;
         mux_to_pads_o.muxed_v_14.output_en = s_reg2hw.muxed_v_14_cfg.output_en.q;
         mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_14_SEL_ETHERNET_TXCTL: begin
          mux_to_pads_o.muxed_v_14.chip2pad = port_signals_soc2pad_i.ethernet.eth_txctl_o;
          mux_to_pads_o.muxed_v_14.input_en = 1'b0;
          mux_to_pads_o.muxed_v_14.output_en = 1'b1;
          mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_14_SEL_SERIAL_LINK_O_V_0: begin
          mux_to_pads_o.muxed_v_14.chip2pad = port_signals_soc2pad_i.serial_link.slink_v_0_o;
          mux_to_pads_o.muxed_v_14.input_en = 1'b0;
          mux_to_pads_o.muxed_v_14.output_en = 1'b1;
          mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_14_SEL_HPC_ADDR_0: begin
          mux_to_pads_o.muxed_v_14.chip2pad = port_signals_soc2pad_i.hpc.hpc_addr_0_o;
          mux_to_pads_o.muxed_v_14.input_en = 1'b0;
          mux_to_pads_o.muxed_v_14.output_en = 1'b1;
          mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_14_SEL_GPIO_IO_V_14: begin
          mux_to_pads_o.muxed_v_14.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_14_o;
          mux_to_pads_o.muxed_v_14.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_14_oen_i;
          mux_to_pads_o.muxed_v_14.output_en = port_signals_soc2pad_i.gpio.gpio_v_14_oen_i;
          mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_14.chip2pad = s_reg2hw.muxed_v_14_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_14.input_en = s_reg2hw.muxed_v_14_cfg.input_en.q;
         mux_to_pads_o.muxed_v_14.output_en = s_reg2hw.muxed_v_14_cfg.output_en.q;
         mux_to_pads_o.muxed_v_14.pull_en = s_reg2hw.muxed_v_14_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_14.pull_sel = s_reg2hw.muxed_v_14_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_15
   always_comb begin
     unique case (s_reg2hw.muxed_v_15_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_15_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_15.chip2pad = s_reg2hw.muxed_v_15_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_15.input_en = s_reg2hw.muxed_v_15_cfg.input_en.q;
         mux_to_pads_o.muxed_v_15.output_en = s_reg2hw.muxed_v_15_cfg.output_en.q;
         mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_15_SEL_ETHERNET_TXD_0: begin
          mux_to_pads_o.muxed_v_15.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd_0_o;
          mux_to_pads_o.muxed_v_15.input_en = 1'b0;
          mux_to_pads_o.muxed_v_15.output_en = 1'b1;
          mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_15_SEL_SERIAL_LINK_O_V_1: begin
          mux_to_pads_o.muxed_v_15.chip2pad = port_signals_soc2pad_i.serial_link.slink_v_1_o;
          mux_to_pads_o.muxed_v_15.input_en = 1'b0;
          mux_to_pads_o.muxed_v_15.output_en = 1'b1;
          mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_15_SEL_HPC_ADDR_1: begin
          mux_to_pads_o.muxed_v_15.chip2pad = port_signals_soc2pad_i.hpc.hpc_addr_1_o;
          mux_to_pads_o.muxed_v_15.input_en = 1'b0;
          mux_to_pads_o.muxed_v_15.output_en = 1'b1;
          mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_15_SEL_GPIO_IO_V_15: begin
          mux_to_pads_o.muxed_v_15.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_15_o;
          mux_to_pads_o.muxed_v_15.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_15_oen_i;
          mux_to_pads_o.muxed_v_15.output_en = port_signals_soc2pad_i.gpio.gpio_v_15_oen_i;
          mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_15.chip2pad = s_reg2hw.muxed_v_15_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_15.input_en = s_reg2hw.muxed_v_15_cfg.input_en.q;
         mux_to_pads_o.muxed_v_15.output_en = s_reg2hw.muxed_v_15_cfg.output_en.q;
         mux_to_pads_o.muxed_v_15.pull_en = s_reg2hw.muxed_v_15_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_15.pull_sel = s_reg2hw.muxed_v_15_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_16
   always_comb begin
     unique case (s_reg2hw.muxed_v_16_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_16_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_16.chip2pad = s_reg2hw.muxed_v_16_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_16.input_en = s_reg2hw.muxed_v_16_cfg.input_en.q;
         mux_to_pads_o.muxed_v_16.output_en = s_reg2hw.muxed_v_16_cfg.output_en.q;
         mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_16_SEL_ETHERNET_TXD_1: begin
          mux_to_pads_o.muxed_v_16.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd_1_o;
          mux_to_pads_o.muxed_v_16.input_en = 1'b0;
          mux_to_pads_o.muxed_v_16.output_en = 1'b1;
          mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_16_SEL_SERIAL_LINK_O_V_2: begin
          mux_to_pads_o.muxed_v_16.chip2pad = port_signals_soc2pad_i.serial_link.slink_v_2_o;
          mux_to_pads_o.muxed_v_16.input_en = 1'b0;
          mux_to_pads_o.muxed_v_16.output_en = 1'b1;
          mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_16_SEL_HPC_ADDR_2: begin
          mux_to_pads_o.muxed_v_16.chip2pad = port_signals_soc2pad_i.hpc.hpc_addr_2_o;
          mux_to_pads_o.muxed_v_16.input_en = 1'b0;
          mux_to_pads_o.muxed_v_16.output_en = 1'b1;
          mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_16_SEL_GPIO_IO_V_16: begin
          mux_to_pads_o.muxed_v_16.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_16_o;
          mux_to_pads_o.muxed_v_16.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_16_oen_i;
          mux_to_pads_o.muxed_v_16.output_en = port_signals_soc2pad_i.gpio.gpio_v_16_oen_i;
          mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_16.chip2pad = s_reg2hw.muxed_v_16_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_16.input_en = s_reg2hw.muxed_v_16_cfg.input_en.q;
         mux_to_pads_o.muxed_v_16.output_en = s_reg2hw.muxed_v_16_cfg.output_en.q;
         mux_to_pads_o.muxed_v_16.pull_en = s_reg2hw.muxed_v_16_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_16.pull_sel = s_reg2hw.muxed_v_16_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_v_17
   always_comb begin
     unique case (s_reg2hw.muxed_v_17_mux_sel.q)
       PAD_MUX_GROUP_MUXED_V_17_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_v_17.chip2pad = s_reg2hw.muxed_v_17_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_17.input_en = s_reg2hw.muxed_v_17_cfg.input_en.q;
         mux_to_pads_o.muxed_v_17.output_en = s_reg2hw.muxed_v_17_cfg.output_en.q;
         mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_17_SEL_ETHERNET_TXD_2: begin
          mux_to_pads_o.muxed_v_17.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd_2_o;
          mux_to_pads_o.muxed_v_17.input_en = 1'b0;
          mux_to_pads_o.muxed_v_17.output_en = 1'b1;
          mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_17_SEL_SERIAL_LINK_O_V_3: begin
          mux_to_pads_o.muxed_v_17.chip2pad = port_signals_soc2pad_i.serial_link.slink_v_3_o;
          mux_to_pads_o.muxed_v_17.input_en = 1'b0;
          mux_to_pads_o.muxed_v_17.output_en = 1'b1;
          mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_17_SEL_HPC_CMD_EN: begin
          mux_to_pads_o.muxed_v_17.chip2pad = port_signals_soc2pad_i.hpc.hpc_cmd_en_o;
          mux_to_pads_o.muxed_v_17.input_en = 1'b0;
          mux_to_pads_o.muxed_v_17.output_en = 1'b1;
          mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_V_17_SEL_GPIO_IO_V_17: begin
          mux_to_pads_o.muxed_v_17.chip2pad = port_signals_soc2pad_i.gpio.gpio_v_17_o;
          mux_to_pads_o.muxed_v_17.input_en = ~port_signals_soc2pad_i.gpio.gpio_v_17_oen_i;
          mux_to_pads_o.muxed_v_17.output_en = port_signals_soc2pad_i.gpio.gpio_v_17_oen_i;
          mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
          mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_v_17.chip2pad = s_reg2hw.muxed_v_17_cfg.chip2pad.q;
         mux_to_pads_o.muxed_v_17.input_en = s_reg2hw.muxed_v_17_cfg.input_en.q;
         mux_to_pads_o.muxed_v_17.output_en = s_reg2hw.muxed_v_17_cfg.output_en.q;
         mux_to_pads_o.muxed_v_17.pull_en = s_reg2hw.muxed_v_17_cfg.pull_en.q;
         mux_to_pads_o.muxed_v_17.pull_sel = s_reg2hw.muxed_v_17_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_h_00
   always_comb begin
     unique case (s_reg2hw.muxed_h_00_mux_sel.q)
       PAD_MUX_GROUP_MUXED_H_00_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_h_00.chip2pad = s_reg2hw.muxed_h_00_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_00.input_en = s_reg2hw.muxed_h_00_cfg.input_en.q;
         mux_to_pads_o.muxed_h_00.output_en = s_reg2hw.muxed_h_00_cfg.output_en.q;
         mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_00_SEL_ETHERNET_TXD_3: begin
          mux_to_pads_o.muxed_h_00.chip2pad = port_signals_soc2pad_i.ethernet.eth_txd_3_o;
          mux_to_pads_o.muxed_h_00.input_en = 1'b0;
          mux_to_pads_o.muxed_h_00.output_en = 1'b1;
          mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_00_SEL_SERIAL_LINK_O_H_0: begin
          mux_to_pads_o.muxed_h_00.chip2pad = port_signals_soc2pad_i.serial_link.slink_h_0_o;
          mux_to_pads_o.muxed_h_00.input_en = 1'b0;
          mux_to_pads_o.muxed_h_00.output_en = 1'b1;
          mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_00_SEL_HPC_SAMPLE: begin
          mux_to_pads_o.muxed_h_00.chip2pad = port_signals_soc2pad_i.hpc.hpc_sample_o;
          mux_to_pads_o.muxed_h_00.input_en = 1'b0;
          mux_to_pads_o.muxed_h_00.output_en = 1'b1;
          mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_00_SEL_GPIO_IO_H_0: begin
          mux_to_pads_o.muxed_h_00.chip2pad = port_signals_soc2pad_i.gpio.gpio_h_0_o;
          mux_to_pads_o.muxed_h_00.input_en = ~port_signals_soc2pad_i.gpio.gpio_h_0_oen_i;
          mux_to_pads_o.muxed_h_00.output_en = port_signals_soc2pad_i.gpio.gpio_h_0_oen_i;
          mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_h_00.chip2pad = s_reg2hw.muxed_h_00_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_00.input_en = s_reg2hw.muxed_h_00_cfg.input_en.q;
         mux_to_pads_o.muxed_h_00.output_en = s_reg2hw.muxed_h_00_cfg.output_en.q;
         mux_to_pads_o.muxed_h_00.pull_en = s_reg2hw.muxed_h_00_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_00.pull_sel = s_reg2hw.muxed_h_00_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_h_01
   always_comb begin
     unique case (s_reg2hw.muxed_h_01_mux_sel.q)
       PAD_MUX_GROUP_MUXED_H_01_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_h_01.chip2pad = s_reg2hw.muxed_h_01_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_01.input_en = s_reg2hw.muxed_h_01_cfg.input_en.q;
         mux_to_pads_o.muxed_h_01.output_en = s_reg2hw.muxed_h_01_cfg.output_en.q;
         mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_01_SEL_ETHERNET_MD: begin
          mux_to_pads_o.muxed_h_01.chip2pad = port_signals_soc2pad_i.ethernet.eth_md_o;
          mux_to_pads_o.muxed_h_01.input_en = ~port_signals_soc2pad_i.ethernet.eth_md_oen_i;
          mux_to_pads_o.muxed_h_01.output_en = port_signals_soc2pad_i.ethernet.eth_md_oen_i;
          mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_01_SEL_SERIAL_LINK_O_H_1: begin
          mux_to_pads_o.muxed_h_01.chip2pad = port_signals_soc2pad_i.serial_link.slink_h_1_o;
          mux_to_pads_o.muxed_h_01.input_en = 1'b0;
          mux_to_pads_o.muxed_h_01.output_en = 1'b1;
          mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_01_SEL_LLC_LINE_0: begin
          mux_to_pads_o.muxed_h_01.chip2pad = port_signals_soc2pad_i.llc.llc_line_0_o;
          mux_to_pads_o.muxed_h_01.input_en = 1'b0;
          mux_to_pads_o.muxed_h_01.output_en = 1'b1;
          mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_01_SEL_GPIO_IO_H_1: begin
          mux_to_pads_o.muxed_h_01.chip2pad = port_signals_soc2pad_i.gpio.gpio_h_1_o;
          mux_to_pads_o.muxed_h_01.input_en = ~port_signals_soc2pad_i.gpio.gpio_h_1_oen_i;
          mux_to_pads_o.muxed_h_01.output_en = port_signals_soc2pad_i.gpio.gpio_h_1_oen_i;
          mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_h_01.chip2pad = s_reg2hw.muxed_h_01_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_01.input_en = s_reg2hw.muxed_h_01_cfg.input_en.q;
         mux_to_pads_o.muxed_h_01.output_en = s_reg2hw.muxed_h_01_cfg.output_en.q;
         mux_to_pads_o.muxed_h_01.pull_en = s_reg2hw.muxed_h_01_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_01.pull_sel = s_reg2hw.muxed_h_01_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_h_02
   always_comb begin
     unique case (s_reg2hw.muxed_h_02_mux_sel.q)
       PAD_MUX_GROUP_MUXED_H_02_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_h_02.chip2pad = s_reg2hw.muxed_h_02_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_02.input_en = s_reg2hw.muxed_h_02_cfg.input_en.q;
         mux_to_pads_o.muxed_h_02.output_en = s_reg2hw.muxed_h_02_cfg.output_en.q;
         mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_02_SEL_ETHERNET_MDC: begin
          mux_to_pads_o.muxed_h_02.chip2pad = port_signals_soc2pad_i.ethernet.eth_mdc_o;
          mux_to_pads_o.muxed_h_02.input_en = 1'b0;
          mux_to_pads_o.muxed_h_02.output_en = 1'b1;
          mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_02_SEL_SERIAL_LINK_O_H_2: begin
          mux_to_pads_o.muxed_h_02.chip2pad = port_signals_soc2pad_i.serial_link.slink_h_2_o;
          mux_to_pads_o.muxed_h_02.input_en = 1'b0;
          mux_to_pads_o.muxed_h_02.output_en = 1'b1;
          mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_02_SEL_LLC_LINE_1: begin
          mux_to_pads_o.muxed_h_02.chip2pad = port_signals_soc2pad_i.llc.llc_line_1_o;
          mux_to_pads_o.muxed_h_02.input_en = 1'b0;
          mux_to_pads_o.muxed_h_02.output_en = 1'b1;
          mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_02_SEL_GPIO_IO_H_2: begin
          mux_to_pads_o.muxed_h_02.chip2pad = port_signals_soc2pad_i.gpio.gpio_h_2_o;
          mux_to_pads_o.muxed_h_02.input_en = ~port_signals_soc2pad_i.gpio.gpio_h_2_oen_i;
          mux_to_pads_o.muxed_h_02.output_en = port_signals_soc2pad_i.gpio.gpio_h_2_oen_i;
          mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_h_02.chip2pad = s_reg2hw.muxed_h_02_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_02.input_en = s_reg2hw.muxed_h_02_cfg.input_en.q;
         mux_to_pads_o.muxed_h_02.output_en = s_reg2hw.muxed_h_02_cfg.output_en.q;
         mux_to_pads_o.muxed_h_02.pull_en = s_reg2hw.muxed_h_02_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_02.pull_sel = s_reg2hw.muxed_h_02_cfg.pull_sel.q;
       end
     endcase
   end // always_comb

   // Pad muxed_h_03
   always_comb begin
     unique case (s_reg2hw.muxed_h_03_mux_sel.q)
       PAD_MUX_GROUP_MUXED_H_03_SEL_DEFAULT: begin
         mux_to_pads_o.muxed_h_03.chip2pad = s_reg2hw.muxed_h_03_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_03.input_en = s_reg2hw.muxed_h_03_cfg.input_en.q;
         mux_to_pads_o.muxed_h_03.output_en = s_reg2hw.muxed_h_03_cfg.output_en.q;
         mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_03_SEL_ETHERNET_RST_N: begin
          mux_to_pads_o.muxed_h_03.chip2pad = port_signals_soc2pad_i.ethernet.eth_rst_no;
          mux_to_pads_o.muxed_h_03.input_en = 1'b0;
          mux_to_pads_o.muxed_h_03.output_en = 1'b1;
          mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_03_SEL_SERIAL_LINK_O_H_3: begin
          mux_to_pads_o.muxed_h_03.chip2pad = port_signals_soc2pad_i.serial_link.slink_h_3_o;
          mux_to_pads_o.muxed_h_03.input_en = 1'b0;
          mux_to_pads_o.muxed_h_03.output_en = 1'b1;
          mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_03_SEL_OBT_EXT_CLK: begin
          mux_to_pads_o.muxed_h_03.chip2pad = s_reg2hw.muxed_h_03_cfg.chip2pad.q;
          mux_to_pads_o.muxed_h_03.input_en = 1'b1;
          mux_to_pads_o.muxed_h_03.output_en = 1'b0;
          mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
       PAD_MUX_GROUP_MUXED_H_03_SEL_GPIO_IO_H_3: begin
          mux_to_pads_o.muxed_h_03.chip2pad = port_signals_soc2pad_i.gpio.gpio_h_3_o;
          mux_to_pads_o.muxed_h_03.input_en = ~port_signals_soc2pad_i.gpio.gpio_h_3_oen_i;
          mux_to_pads_o.muxed_h_03.output_en = port_signals_soc2pad_i.gpio.gpio_h_3_oen_i;
          mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
          mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
       default: begin
         mux_to_pads_o.muxed_h_03.chip2pad = s_reg2hw.muxed_h_03_cfg.chip2pad.q;
         mux_to_pads_o.muxed_h_03.input_en = s_reg2hw.muxed_h_03_cfg.input_en.q;
         mux_to_pads_o.muxed_h_03.output_en = s_reg2hw.muxed_h_03_cfg.output_en.q;
         mux_to_pads_o.muxed_h_03.pull_en = s_reg2hw.muxed_h_03_cfg.pull_en.q;
         mux_to_pads_o.muxed_h_03.pull_sel = s_reg2hw.muxed_h_03_cfg.pull_sel.q;
       end
     endcase
   end // always_comb


  // Pad -> SoC Multiplex Logic
  // Port Group spi




  // Port Signal spih_sd_0_i
  logic [0:0] port_mux_sel_spi_spih_sd_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_03_SEL_WIDTH-1:0] port_mux_sel_spi_spih_sd_0_i_arbitrated;
  logic port_mux_sel_spi_spih_sd_0_i_no_connection;

   assign port_mux_sel_spi_spih_sd_0_i_req[PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03] = s_reg2hw.muxed_v_03_mux_sel.q == PAD_MUX_GROUP_MUXED_V_03_SEL_SPI_SD_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_spih_sd_0_i_arbiter (
     .in_i(port_mux_sel_spi_spih_sd_0_i_req),
     .cnt_o(port_mux_sel_spi_spih_sd_0_i_arbitrated),
     .empty_o(port_mux_sel_spi_spih_sd_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_spih_sd_0_i_no_connection) begin
        port_signals_pad2soc_o.spi.spih_sd_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_spih_sd_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03: begin
            port_signals_pad2soc_o.spi.spih_sd_0_i = pads_to_mux_i.muxed_v_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi.spih_sd_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_sd_1_i
  logic [0:0] port_mux_sel_spi_spih_sd_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_04_SEL_WIDTH-1:0] port_mux_sel_spi_spih_sd_1_i_arbitrated;
  logic port_mux_sel_spi_spih_sd_1_i_no_connection;

   assign port_mux_sel_spi_spih_sd_1_i_req[PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04] = s_reg2hw.muxed_v_04_mux_sel.q == PAD_MUX_GROUP_MUXED_V_04_SEL_SPI_SD_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_spih_sd_1_i_arbiter (
     .in_i(port_mux_sel_spi_spih_sd_1_i_req),
     .cnt_o(port_mux_sel_spi_spih_sd_1_i_arbitrated),
     .empty_o(port_mux_sel_spi_spih_sd_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_spih_sd_1_i_no_connection) begin
        port_signals_pad2soc_o.spi.spih_sd_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_spih_sd_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04: begin
            port_signals_pad2soc_o.spi.spih_sd_1_i = pads_to_mux_i.muxed_v_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi.spih_sd_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_sd_2_i
  logic [0:0] port_mux_sel_spi_spih_sd_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_05_SEL_WIDTH-1:0] port_mux_sel_spi_spih_sd_2_i_arbitrated;
  logic port_mux_sel_spi_spih_sd_2_i_no_connection;

   assign port_mux_sel_spi_spih_sd_2_i_req[PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05] = s_reg2hw.muxed_v_05_mux_sel.q == PAD_MUX_GROUP_MUXED_V_05_SEL_SPI_SD_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_spih_sd_2_i_arbiter (
     .in_i(port_mux_sel_spi_spih_sd_2_i_req),
     .cnt_o(port_mux_sel_spi_spih_sd_2_i_arbitrated),
     .empty_o(port_mux_sel_spi_spih_sd_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_spih_sd_2_i_no_connection) begin
        port_signals_pad2soc_o.spi.spih_sd_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_spih_sd_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05: begin
            port_signals_pad2soc_o.spi.spih_sd_2_i = pads_to_mux_i.muxed_v_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi.spih_sd_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_sd_3_i
  logic [0:0] port_mux_sel_spi_spih_sd_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_06_SEL_WIDTH-1:0] port_mux_sel_spi_spih_sd_3_i_arbitrated;
  logic port_mux_sel_spi_spih_sd_3_i_no_connection;

   assign port_mux_sel_spi_spih_sd_3_i_req[PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06] = s_reg2hw.muxed_v_06_mux_sel.q == PAD_MUX_GROUP_MUXED_V_06_SEL_SPI_SD_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_spih_sd_3_i_arbiter (
     .in_i(port_mux_sel_spi_spih_sd_3_i_req),
     .cnt_o(port_mux_sel_spi_spih_sd_3_i_arbitrated),
     .empty_o(port_mux_sel_spi_spih_sd_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_spih_sd_3_i_no_connection) begin
        port_signals_pad2soc_o.spi.spih_sd_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_spih_sd_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06: begin
            port_signals_pad2soc_o.spi.spih_sd_3_i = pads_to_mux_i.muxed_v_06.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi.spih_sd_3_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group ethernet

  // Port Signal eth_rxck_i
  logic [0:0] port_mux_sel_ethernet_eth_rxck_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_07_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxck_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxck_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxck_i_req[PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07] = s_reg2hw.muxed_v_07_mux_sel.q == PAD_MUX_GROUP_MUXED_V_07_SEL_ETHERNET_RXCK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxck_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxck_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxck_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxck_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxck_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxck_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxck_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07: begin
            port_signals_pad2soc_o.ethernet.eth_rxck_i = pads_to_mux_i.muxed_v_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxck_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxctl_i
  logic [0:0] port_mux_sel_ethernet_eth_rxctl_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_08_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxctl_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxctl_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxctl_i_req[PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08] = s_reg2hw.muxed_v_08_mux_sel.q == PAD_MUX_GROUP_MUXED_V_08_SEL_ETHERNET_RXCTL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxctl_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxctl_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxctl_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxctl_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxctl_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxctl_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxctl_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08: begin
            port_signals_pad2soc_o.ethernet.eth_rxctl_i = pads_to_mux_i.muxed_v_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxctl_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd_0_i
  logic [0:0] port_mux_sel_ethernet_eth_rxd_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_09_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd_0_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd_0_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxd_0_i_req[PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09] = s_reg2hw.muxed_v_09_mux_sel.q == PAD_MUX_GROUP_MUXED_V_09_SEL_ETHERNET_RXD_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd_0_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd_0_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd_0_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd_0_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_0_i = pads_to_mux_i.muxed_v_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd_1_i
  logic [0:0] port_mux_sel_ethernet_eth_rxd_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_10_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd_1_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd_1_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxd_1_i_req[PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10] = s_reg2hw.muxed_v_10_mux_sel.q == PAD_MUX_GROUP_MUXED_V_10_SEL_ETHERNET_RXD_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd_1_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd_1_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd_1_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd_1_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_1_i = pads_to_mux_i.muxed_v_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd_2_i
  logic [0:0] port_mux_sel_ethernet_eth_rxd_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_11_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd_2_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd_2_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxd_2_i_req[PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11] = s_reg2hw.muxed_v_11_mux_sel.q == PAD_MUX_GROUP_MUXED_V_11_SEL_ETHERNET_RXD_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd_2_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd_2_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd_2_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd_2_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_2_i = pads_to_mux_i.muxed_v_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal eth_rxd_3_i
  logic [0:0] port_mux_sel_ethernet_eth_rxd_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_12_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_rxd_3_i_arbitrated;
  logic port_mux_sel_ethernet_eth_rxd_3_i_no_connection;

   assign port_mux_sel_ethernet_eth_rxd_3_i_req[PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12] = s_reg2hw.muxed_v_12_mux_sel.q == PAD_MUX_GROUP_MUXED_V_12_SEL_ETHERNET_RXD_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_rxd_3_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_rxd_3_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_rxd_3_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_rxd_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_rxd_3_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_rxd_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_rxd_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_3_i = pads_to_mux_i.muxed_v_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_rxd_3_i = 1'b0;
          end
       endcase
     end
   end








  // Port Signal eth_md_i
  logic [0:0] port_mux_sel_ethernet_eth_md_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_01_SEL_WIDTH-1:0] port_mux_sel_ethernet_eth_md_i_arbitrated;
  logic port_mux_sel_ethernet_eth_md_i_no_connection;

   assign port_mux_sel_ethernet_eth_md_i_req[PORT_MUX_GROUP_MUXED_H_01_SEL_MUXED_H_01] = s_reg2hw.muxed_h_01_mux_sel.q == PAD_MUX_GROUP_MUXED_H_01_SEL_ETHERNET_MD ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ethernet_eth_md_i_arbiter (
     .in_i(port_mux_sel_ethernet_eth_md_i_req),
     .cnt_o(port_mux_sel_ethernet_eth_md_i_arbitrated),
     .empty_o(port_mux_sel_ethernet_eth_md_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ethernet_eth_md_i_no_connection) begin
        port_signals_pad2soc_o.ethernet.eth_md_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ethernet_eth_md_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_01_SEL_MUXED_H_01: begin
            port_signals_pad2soc_o.ethernet.eth_md_i = pads_to_mux_i.muxed_h_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ethernet.eth_md_i = 1'b0;
          end
       endcase
     end
   end



  // Port Group can

  // Port Signal can_rx_i
  logic [0:0] port_mux_sel_can_can_rx_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_00_SEL_WIDTH-1:0] port_mux_sel_can_can_rx_i_arbitrated;
  logic port_mux_sel_can_can_rx_i_no_connection;

   assign port_mux_sel_can_can_rx_i_req[PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00] = s_reg2hw.muxed_v_00_mux_sel.q == PAD_MUX_GROUP_MUXED_V_00_SEL_CAN_RX ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_can_can_rx_i_arbiter (
     .in_i(port_mux_sel_can_can_rx_i_req),
     .cnt_o(port_mux_sel_can_can_rx_i_arbitrated),
     .empty_o(port_mux_sel_can_can_rx_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_can_can_rx_i_no_connection) begin
        port_signals_pad2soc_o.can.can_rx_i = 1'b0;
     end else begin
        unique case (port_mux_sel_can_can_rx_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00: begin
            port_signals_pad2soc_o.can.can_rx_i = pads_to_mux_i.muxed_v_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.can.can_rx_i = 1'b0;
          end
       endcase
     end
   end


  // Port Group serial_link

  // Port Signal slink_rcv_clk_i
  logic [0:0] port_mux_sel_serial_link_slink_rcv_clk_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_04_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_rcv_clk_i_arbitrated;
  logic port_mux_sel_serial_link_slink_rcv_clk_i_no_connection;

   assign port_mux_sel_serial_link_slink_rcv_clk_i_req[PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04] = s_reg2hw.muxed_v_04_mux_sel.q == PAD_MUX_GROUP_MUXED_V_04_SEL_SERIAL_LINK_RCV_CLK_I ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_rcv_clk_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_rcv_clk_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_rcv_clk_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_rcv_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_rcv_clk_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_rcv_clk_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_rcv_clk_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04: begin
            port_signals_pad2soc_o.serial_link.slink_rcv_clk_i = pads_to_mux_i.muxed_v_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_rcv_clk_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_0_i
  logic [0:0] port_mux_sel_serial_link_slink_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_05_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_0_i_arbitrated;
  logic port_mux_sel_serial_link_slink_0_i_no_connection;

   assign port_mux_sel_serial_link_slink_0_i_req[PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05] = s_reg2hw.muxed_v_05_mux_sel.q == PAD_MUX_GROUP_MUXED_V_05_SEL_SERIAL_LINK_I_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_0_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_0_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_0_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_0_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_0_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05: begin
            port_signals_pad2soc_o.serial_link.slink_0_i = pads_to_mux_i.muxed_v_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_0_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_1_i
  logic [0:0] port_mux_sel_serial_link_slink_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_06_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_1_i_arbitrated;
  logic port_mux_sel_serial_link_slink_1_i_no_connection;

   assign port_mux_sel_serial_link_slink_1_i_req[PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06] = s_reg2hw.muxed_v_06_mux_sel.q == PAD_MUX_GROUP_MUXED_V_06_SEL_SERIAL_LINK_I_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_1_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_1_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_1_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_1_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_1_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06: begin
            port_signals_pad2soc_o.serial_link.slink_1_i = pads_to_mux_i.muxed_v_06.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_1_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_2_i
  logic [0:0] port_mux_sel_serial_link_slink_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_07_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_2_i_arbitrated;
  logic port_mux_sel_serial_link_slink_2_i_no_connection;

   assign port_mux_sel_serial_link_slink_2_i_req[PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07] = s_reg2hw.muxed_v_07_mux_sel.q == PAD_MUX_GROUP_MUXED_V_07_SEL_SERIAL_LINK_I_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_2_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_2_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_2_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_2_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_2_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07: begin
            port_signals_pad2soc_o.serial_link.slink_2_i = pads_to_mux_i.muxed_v_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_2_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_3_i
  logic [0:0] port_mux_sel_serial_link_slink_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_08_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_3_i_arbitrated;
  logic port_mux_sel_serial_link_slink_3_i_no_connection;

   assign port_mux_sel_serial_link_slink_3_i_req[PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08] = s_reg2hw.muxed_v_08_mux_sel.q == PAD_MUX_GROUP_MUXED_V_08_SEL_SERIAL_LINK_I_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_3_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_3_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_3_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_3_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_3_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08: begin
            port_signals_pad2soc_o.serial_link.slink_3_i = pads_to_mux_i.muxed_v_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_3_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_4_i
  logic [0:0] port_mux_sel_serial_link_slink_4_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_09_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_4_i_arbitrated;
  logic port_mux_sel_serial_link_slink_4_i_no_connection;

   assign port_mux_sel_serial_link_slink_4_i_req[PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09] = s_reg2hw.muxed_v_09_mux_sel.q == PAD_MUX_GROUP_MUXED_V_09_SEL_SERIAL_LINK_I_4 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_4_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_4_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_4_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_4_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_4_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_4_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_4_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09: begin
            port_signals_pad2soc_o.serial_link.slink_4_i = pads_to_mux_i.muxed_v_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_4_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_5_i
  logic [0:0] port_mux_sel_serial_link_slink_5_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_10_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_5_i_arbitrated;
  logic port_mux_sel_serial_link_slink_5_i_no_connection;

   assign port_mux_sel_serial_link_slink_5_i_req[PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10] = s_reg2hw.muxed_v_10_mux_sel.q == PAD_MUX_GROUP_MUXED_V_10_SEL_SERIAL_LINK_I_5 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_5_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_5_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_5_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_5_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_5_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_5_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_5_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10: begin
            port_signals_pad2soc_o.serial_link.slink_5_i = pads_to_mux_i.muxed_v_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_5_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_6_i
  logic [0:0] port_mux_sel_serial_link_slink_6_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_11_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_6_i_arbitrated;
  logic port_mux_sel_serial_link_slink_6_i_no_connection;

   assign port_mux_sel_serial_link_slink_6_i_req[PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11] = s_reg2hw.muxed_v_11_mux_sel.q == PAD_MUX_GROUP_MUXED_V_11_SEL_SERIAL_LINK_I_6 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_6_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_6_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_6_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_6_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_6_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_6_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_6_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11: begin
            port_signals_pad2soc_o.serial_link.slink_6_i = pads_to_mux_i.muxed_v_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_6_i = 1'b1;
          end
       endcase
     end
   end


  // Port Signal slink_7_i
  logic [0:0] port_mux_sel_serial_link_slink_7_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_12_SEL_WIDTH-1:0] port_mux_sel_serial_link_slink_7_i_arbitrated;
  logic port_mux_sel_serial_link_slink_7_i_no_connection;

   assign port_mux_sel_serial_link_slink_7_i_req[PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12] = s_reg2hw.muxed_v_12_mux_sel.q == PAD_MUX_GROUP_MUXED_V_12_SEL_SERIAL_LINK_I_7 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_serial_link_slink_7_i_arbiter (
     .in_i(port_mux_sel_serial_link_slink_7_i_req),
     .cnt_o(port_mux_sel_serial_link_slink_7_i_arbitrated),
     .empty_o(port_mux_sel_serial_link_slink_7_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_serial_link_slink_7_i_no_connection) begin
        port_signals_pad2soc_o.serial_link.slink_7_i = 1'b1;
     end else begin
        unique case (port_mux_sel_serial_link_slink_7_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12: begin
            port_signals_pad2soc_o.serial_link.slink_7_i = pads_to_mux_i.muxed_v_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.serial_link.slink_7_i = 1'b1;
          end
       endcase
     end
   end










  // Port Group i2c

  // Port Signal i2c_sda_i
  logic [0:0] port_mux_sel_i2c_i2c_sda_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_00_SEL_WIDTH-1:0] port_mux_sel_i2c_i2c_sda_i_arbitrated;
  logic port_mux_sel_i2c_i2c_sda_i_no_connection;

   assign port_mux_sel_i2c_i2c_sda_i_req[PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00] = s_reg2hw.muxed_v_00_mux_sel.q == PAD_MUX_GROUP_MUXED_V_00_SEL_I2C_SDA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_i2c_i2c_sda_i_arbiter (
     .in_i(port_mux_sel_i2c_i2c_sda_i_req),
     .cnt_o(port_mux_sel_i2c_i2c_sda_i_arbitrated),
     .empty_o(port_mux_sel_i2c_i2c_sda_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c_i2c_sda_i_no_connection) begin
        port_signals_pad2soc_o.i2c.i2c_sda_i = 1'b0;
     end else begin
        unique case (port_mux_sel_i2c_i2c_sda_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00: begin
            port_signals_pad2soc_o.i2c.i2c_sda_i = pads_to_mux_i.muxed_v_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c.i2c_sda_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal i2c_scl_i
  logic [0:0] port_mux_sel_i2c_i2c_scl_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_01_SEL_WIDTH-1:0] port_mux_sel_i2c_i2c_scl_i_arbitrated;
  logic port_mux_sel_i2c_i2c_scl_i_no_connection;

   assign port_mux_sel_i2c_i2c_scl_i_req[PORT_MUX_GROUP_MUXED_V_01_SEL_MUXED_V_01] = s_reg2hw.muxed_v_01_mux_sel.q == PAD_MUX_GROUP_MUXED_V_01_SEL_I2C_SCL ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_i2c_i2c_scl_i_arbiter (
     .in_i(port_mux_sel_i2c_i2c_scl_i_req),
     .cnt_o(port_mux_sel_i2c_i2c_scl_i_arbitrated),
     .empty_o(port_mux_sel_i2c_i2c_scl_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_i2c_i2c_scl_i_no_connection) begin
        port_signals_pad2soc_o.i2c.i2c_scl_i = 1'b0;
     end else begin
        unique case (port_mux_sel_i2c_i2c_scl_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_01_SEL_MUXED_V_01: begin
            port_signals_pad2soc_o.i2c.i2c_scl_i = pads_to_mux_i.muxed_v_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.i2c.i2c_scl_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group tc

  // Port Signal tc_active_i
  logic [0:0] port_mux_sel_tc_tc_active_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_07_SEL_WIDTH-1:0] port_mux_sel_tc_tc_active_i_arbitrated;
  logic port_mux_sel_tc_tc_active_i_no_connection;

   assign port_mux_sel_tc_tc_active_i_req[PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07] = s_reg2hw.muxed_v_07_mux_sel.q == PAD_MUX_GROUP_MUXED_V_07_SEL_TC_ACTIVE ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_tc_tc_active_i_arbiter (
     .in_i(port_mux_sel_tc_tc_active_i_req),
     .cnt_o(port_mux_sel_tc_tc_active_i_arbitrated),
     .empty_o(port_mux_sel_tc_tc_active_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_tc_tc_active_i_no_connection) begin
        port_signals_pad2soc_o.tc.tc_active_i = 1'b0;
     end else begin
        unique case (port_mux_sel_tc_tc_active_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07: begin
            port_signals_pad2soc_o.tc.tc_active_i = pads_to_mux_i.muxed_v_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.tc.tc_active_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tc_clk_i
  logic [0:0] port_mux_sel_tc_tc_clk_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_08_SEL_WIDTH-1:0] port_mux_sel_tc_tc_clk_i_arbitrated;
  logic port_mux_sel_tc_tc_clk_i_no_connection;

   assign port_mux_sel_tc_tc_clk_i_req[PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08] = s_reg2hw.muxed_v_08_mux_sel.q == PAD_MUX_GROUP_MUXED_V_08_SEL_TC_CLK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_tc_tc_clk_i_arbiter (
     .in_i(port_mux_sel_tc_tc_clk_i_req),
     .cnt_o(port_mux_sel_tc_tc_clk_i_arbitrated),
     .empty_o(port_mux_sel_tc_tc_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_tc_tc_clk_i_no_connection) begin
        port_signals_pad2soc_o.tc.tc_clk_i = 1'b0;
     end else begin
        unique case (port_mux_sel_tc_tc_clk_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08: begin
            port_signals_pad2soc_o.tc.tc_clk_i = pads_to_mux_i.muxed_v_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.tc.tc_clk_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal tc_data_i
  logic [0:0] port_mux_sel_tc_tc_data_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_09_SEL_WIDTH-1:0] port_mux_sel_tc_tc_data_i_arbitrated;
  logic port_mux_sel_tc_tc_data_i_no_connection;

   assign port_mux_sel_tc_tc_data_i_req[PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09] = s_reg2hw.muxed_v_09_mux_sel.q == PAD_MUX_GROUP_MUXED_V_09_SEL_TC_DATA ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_tc_tc_data_i_arbiter (
     .in_i(port_mux_sel_tc_tc_data_i_req),
     .cnt_o(port_mux_sel_tc_tc_data_i_arbitrated),
     .empty_o(port_mux_sel_tc_tc_data_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_tc_tc_data_i_no_connection) begin
        port_signals_pad2soc_o.tc.tc_data_i = 1'b0;
     end else begin
        unique case (port_mux_sel_tc_tc_data_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09: begin
            port_signals_pad2soc_o.tc.tc_data_i = pads_to_mux_i.muxed_v_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.tc.tc_data_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group ptme




  // Port Signal ptme_ext_clk_i
  logic [0:0] port_mux_sel_ptme_ptme_ext_clk_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_13_SEL_WIDTH-1:0] port_mux_sel_ptme_ptme_ext_clk_i_arbitrated;
  logic port_mux_sel_ptme_ptme_ext_clk_i_no_connection;

   assign port_mux_sel_ptme_ptme_ext_clk_i_req[PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13] = s_reg2hw.muxed_v_13_mux_sel.q == PAD_MUX_GROUP_MUXED_V_13_SEL_PTME_EXT_CLK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_ptme_ptme_ext_clk_i_arbiter (
     .in_i(port_mux_sel_ptme_ptme_ext_clk_i_req),
     .cnt_o(port_mux_sel_ptme_ptme_ext_clk_i_arbitrated),
     .empty_o(port_mux_sel_ptme_ptme_ext_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_ptme_ptme_ext_clk_i_no_connection) begin
        port_signals_pad2soc_o.ptme.ptme_ext_clk_i = 1'b0;
     end else begin
        unique case (port_mux_sel_ptme_ptme_ext_clk_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13: begin
            port_signals_pad2soc_o.ptme.ptme_ext_clk_i = pads_to_mux_i.muxed_v_13.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.ptme.ptme_ext_clk_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group obt

  // Port Signal obt_ext_clk_i
  logic [0:0] port_mux_sel_obt_obt_ext_clk_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_03_SEL_WIDTH-1:0] port_mux_sel_obt_obt_ext_clk_i_arbitrated;
  logic port_mux_sel_obt_obt_ext_clk_i_no_connection;

   assign port_mux_sel_obt_obt_ext_clk_i_req[PORT_MUX_GROUP_MUXED_H_03_SEL_MUXED_H_03] = s_reg2hw.muxed_h_03_mux_sel.q == PAD_MUX_GROUP_MUXED_H_03_SEL_OBT_EXT_CLK ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_obt_obt_ext_clk_i_arbiter (
     .in_i(port_mux_sel_obt_obt_ext_clk_i_req),
     .cnt_o(port_mux_sel_obt_obt_ext_clk_i_arbitrated),
     .empty_o(port_mux_sel_obt_obt_ext_clk_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_obt_obt_ext_clk_i_no_connection) begin
        port_signals_pad2soc_o.obt.obt_ext_clk_i = 1'b0;
     end else begin
        unique case (port_mux_sel_obt_obt_ext_clk_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_03_SEL_MUXED_H_03: begin
            port_signals_pad2soc_o.obt.obt_ext_clk_i = pads_to_mux_i.muxed_h_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.obt.obt_ext_clk_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group spi_ot



  // Port Signal spih_ot_sd_0_i
  logic [0:0] port_mux_sel_spi_ot_spih_ot_sd_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_02_SEL_WIDTH-1:0] port_mux_sel_spi_ot_spih_ot_sd_0_i_arbitrated;
  logic port_mux_sel_spi_ot_spih_ot_sd_0_i_no_connection;

   assign port_mux_sel_spi_ot_spih_ot_sd_0_i_req[PORT_MUX_GROUP_MUXED_V_02_SEL_MUXED_V_02] = s_reg2hw.muxed_v_02_mux_sel.q == PAD_MUX_GROUP_MUXED_V_02_SEL_SPI_OT_SD_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_ot_spih_ot_sd_0_i_arbiter (
     .in_i(port_mux_sel_spi_ot_spih_ot_sd_0_i_req),
     .cnt_o(port_mux_sel_spi_ot_spih_ot_sd_0_i_arbitrated),
     .empty_o(port_mux_sel_spi_ot_spih_ot_sd_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_ot_spih_ot_sd_0_i_no_connection) begin
        port_signals_pad2soc_o.spi_ot.spih_ot_sd_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_ot_spih_ot_sd_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_02_SEL_MUXED_V_02: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_0_i = pads_to_mux_i.muxed_v_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_ot_sd_1_i
  logic [0:0] port_mux_sel_spi_ot_spih_ot_sd_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_03_SEL_WIDTH-1:0] port_mux_sel_spi_ot_spih_ot_sd_1_i_arbitrated;
  logic port_mux_sel_spi_ot_spih_ot_sd_1_i_no_connection;

   assign port_mux_sel_spi_ot_spih_ot_sd_1_i_req[PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03] = s_reg2hw.muxed_v_03_mux_sel.q == PAD_MUX_GROUP_MUXED_V_03_SEL_SPI_OT_SD_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_ot_spih_ot_sd_1_i_arbiter (
     .in_i(port_mux_sel_spi_ot_spih_ot_sd_1_i_req),
     .cnt_o(port_mux_sel_spi_ot_spih_ot_sd_1_i_arbitrated),
     .empty_o(port_mux_sel_spi_ot_spih_ot_sd_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_ot_spih_ot_sd_1_i_no_connection) begin
        port_signals_pad2soc_o.spi_ot.spih_ot_sd_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_ot_spih_ot_sd_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_1_i = pads_to_mux_i.muxed_v_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_ot_sd_2_i
  logic [0:0] port_mux_sel_spi_ot_spih_ot_sd_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_04_SEL_WIDTH-1:0] port_mux_sel_spi_ot_spih_ot_sd_2_i_arbitrated;
  logic port_mux_sel_spi_ot_spih_ot_sd_2_i_no_connection;

   assign port_mux_sel_spi_ot_spih_ot_sd_2_i_req[PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04] = s_reg2hw.muxed_v_04_mux_sel.q == PAD_MUX_GROUP_MUXED_V_04_SEL_SPI_OT_SD_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_ot_spih_ot_sd_2_i_arbiter (
     .in_i(port_mux_sel_spi_ot_spih_ot_sd_2_i_req),
     .cnt_o(port_mux_sel_spi_ot_spih_ot_sd_2_i_arbitrated),
     .empty_o(port_mux_sel_spi_ot_spih_ot_sd_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_ot_spih_ot_sd_2_i_no_connection) begin
        port_signals_pad2soc_o.spi_ot.spih_ot_sd_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_ot_spih_ot_sd_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_2_i = pads_to_mux_i.muxed_v_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal spih_ot_sd_3_i
  logic [0:0] port_mux_sel_spi_ot_spih_ot_sd_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_05_SEL_WIDTH-1:0] port_mux_sel_spi_ot_spih_ot_sd_3_i_arbitrated;
  logic port_mux_sel_spi_ot_spih_ot_sd_3_i_no_connection;

   assign port_mux_sel_spi_ot_spih_ot_sd_3_i_req[PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05] = s_reg2hw.muxed_v_05_mux_sel.q == PAD_MUX_GROUP_MUXED_V_05_SEL_SPI_OT_SD_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_spi_ot_spih_ot_sd_3_i_arbiter (
     .in_i(port_mux_sel_spi_ot_spih_ot_sd_3_i_req),
     .cnt_o(port_mux_sel_spi_ot_spih_ot_sd_3_i_arbitrated),
     .empty_o(port_mux_sel_spi_ot_spih_ot_sd_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_spi_ot_spih_ot_sd_3_i_no_connection) begin
        port_signals_pad2soc_o.spi_ot.spih_ot_sd_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_spi_ot_spih_ot_sd_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_3_i = pads_to_mux_i.muxed_v_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.spi_ot.spih_ot_sd_3_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group pll

  // Port Signal pll_0_i
  logic [0:0] port_mux_sel_pll_pll_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_07_SEL_WIDTH-1:0] port_mux_sel_pll_pll_0_i_arbitrated;
  logic port_mux_sel_pll_pll_0_i_no_connection;

   assign port_mux_sel_pll_pll_0_i_req[PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07] = s_reg2hw.muxed_v_07_mux_sel.q == PAD_MUX_GROUP_MUXED_V_07_SEL_PLL_IO_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_0_i_arbiter (
     .in_i(port_mux_sel_pll_pll_0_i_req),
     .cnt_o(port_mux_sel_pll_pll_0_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_0_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07: begin
            port_signals_pad2soc_o.pll.pll_0_i = pads_to_mux_i.muxed_v_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_1_i
  logic [0:0] port_mux_sel_pll_pll_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_08_SEL_WIDTH-1:0] port_mux_sel_pll_pll_1_i_arbitrated;
  logic port_mux_sel_pll_pll_1_i_no_connection;

   assign port_mux_sel_pll_pll_1_i_req[PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08] = s_reg2hw.muxed_v_08_mux_sel.q == PAD_MUX_GROUP_MUXED_V_08_SEL_PLL_IO_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_1_i_arbiter (
     .in_i(port_mux_sel_pll_pll_1_i_req),
     .cnt_o(port_mux_sel_pll_pll_1_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_1_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08: begin
            port_signals_pad2soc_o.pll.pll_1_i = pads_to_mux_i.muxed_v_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_2_i
  logic [0:0] port_mux_sel_pll_pll_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_09_SEL_WIDTH-1:0] port_mux_sel_pll_pll_2_i_arbitrated;
  logic port_mux_sel_pll_pll_2_i_no_connection;

   assign port_mux_sel_pll_pll_2_i_req[PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09] = s_reg2hw.muxed_v_09_mux_sel.q == PAD_MUX_GROUP_MUXED_V_09_SEL_PLL_IO_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_2_i_arbiter (
     .in_i(port_mux_sel_pll_pll_2_i_req),
     .cnt_o(port_mux_sel_pll_pll_2_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_2_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09: begin
            port_signals_pad2soc_o.pll.pll_2_i = pads_to_mux_i.muxed_v_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_3_i
  logic [0:0] port_mux_sel_pll_pll_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_10_SEL_WIDTH-1:0] port_mux_sel_pll_pll_3_i_arbitrated;
  logic port_mux_sel_pll_pll_3_i_no_connection;

   assign port_mux_sel_pll_pll_3_i_req[PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10] = s_reg2hw.muxed_v_10_mux_sel.q == PAD_MUX_GROUP_MUXED_V_10_SEL_PLL_IO_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_3_i_arbiter (
     .in_i(port_mux_sel_pll_pll_3_i_req),
     .cnt_o(port_mux_sel_pll_pll_3_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_3_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10: begin
            port_signals_pad2soc_o.pll.pll_3_i = pads_to_mux_i.muxed_v_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_3_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_4_i
  logic [0:0] port_mux_sel_pll_pll_4_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_11_SEL_WIDTH-1:0] port_mux_sel_pll_pll_4_i_arbitrated;
  logic port_mux_sel_pll_pll_4_i_no_connection;

   assign port_mux_sel_pll_pll_4_i_req[PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11] = s_reg2hw.muxed_v_11_mux_sel.q == PAD_MUX_GROUP_MUXED_V_11_SEL_PLL_IO_4 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_4_i_arbiter (
     .in_i(port_mux_sel_pll_pll_4_i_req),
     .cnt_o(port_mux_sel_pll_pll_4_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_4_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_4_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_4_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_4_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11: begin
            port_signals_pad2soc_o.pll.pll_4_i = pads_to_mux_i.muxed_v_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_4_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_5_i
  logic [0:0] port_mux_sel_pll_pll_5_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_12_SEL_WIDTH-1:0] port_mux_sel_pll_pll_5_i_arbitrated;
  logic port_mux_sel_pll_pll_5_i_no_connection;

   assign port_mux_sel_pll_pll_5_i_req[PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12] = s_reg2hw.muxed_v_12_mux_sel.q == PAD_MUX_GROUP_MUXED_V_12_SEL_PLL_IO_5 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_5_i_arbiter (
     .in_i(port_mux_sel_pll_pll_5_i_req),
     .cnt_o(port_mux_sel_pll_pll_5_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_5_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_5_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_5_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_5_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12: begin
            port_signals_pad2soc_o.pll.pll_5_i = pads_to_mux_i.muxed_v_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_5_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal pll_6_i
  logic [0:0] port_mux_sel_pll_pll_6_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_13_SEL_WIDTH-1:0] port_mux_sel_pll_pll_6_i_arbitrated;
  logic port_mux_sel_pll_pll_6_i_no_connection;

   assign port_mux_sel_pll_pll_6_i_req[PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13] = s_reg2hw.muxed_v_13_mux_sel.q == PAD_MUX_GROUP_MUXED_V_13_SEL_PLL_IO_6 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_pll_pll_6_i_arbiter (
     .in_i(port_mux_sel_pll_pll_6_i_req),
     .cnt_o(port_mux_sel_pll_pll_6_i_arbitrated),
     .empty_o(port_mux_sel_pll_pll_6_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_pll_pll_6_i_no_connection) begin
        port_signals_pad2soc_o.pll.pll_6_i = 1'b0;
     end else begin
        unique case (port_mux_sel_pll_pll_6_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13: begin
            port_signals_pad2soc_o.pll.pll_6_i = pads_to_mux_i.muxed_v_13.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.pll.pll_6_i = 1'b0;
          end
       endcase
     end
   end

  // Port Group gpio

  // Port Signal gpio_v_0_i
  logic [0:0] port_mux_sel_gpio_gpio_v_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_00_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_0_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_0_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_0_i_req[PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00] = s_reg2hw.muxed_v_00_mux_sel.q == PAD_MUX_GROUP_MUXED_V_00_SEL_GPIO_IO_V_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_0_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_0_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_0_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_0_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_00_SEL_MUXED_V_00: begin
            port_signals_pad2soc_o.gpio.gpio_v_0_i = pads_to_mux_i.muxed_v_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_1_i
  logic [0:0] port_mux_sel_gpio_gpio_v_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_01_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_1_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_1_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_1_i_req[PORT_MUX_GROUP_MUXED_V_01_SEL_MUXED_V_01] = s_reg2hw.muxed_v_01_mux_sel.q == PAD_MUX_GROUP_MUXED_V_01_SEL_GPIO_IO_V_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_1_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_1_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_1_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_1_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_01_SEL_MUXED_V_01: begin
            port_signals_pad2soc_o.gpio.gpio_v_1_i = pads_to_mux_i.muxed_v_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_2_i
  logic [0:0] port_mux_sel_gpio_gpio_v_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_02_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_2_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_2_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_2_i_req[PORT_MUX_GROUP_MUXED_V_02_SEL_MUXED_V_02] = s_reg2hw.muxed_v_02_mux_sel.q == PAD_MUX_GROUP_MUXED_V_02_SEL_GPIO_IO_V_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_2_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_2_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_2_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_2_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_02_SEL_MUXED_V_02: begin
            port_signals_pad2soc_o.gpio.gpio_v_2_i = pads_to_mux_i.muxed_v_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_3_i
  logic [0:0] port_mux_sel_gpio_gpio_v_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_03_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_3_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_3_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_3_i_req[PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03] = s_reg2hw.muxed_v_03_mux_sel.q == PAD_MUX_GROUP_MUXED_V_03_SEL_GPIO_IO_V_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_3_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_3_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_3_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_3_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_03_SEL_MUXED_V_03: begin
            port_signals_pad2soc_o.gpio.gpio_v_3_i = pads_to_mux_i.muxed_v_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_3_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_4_i
  logic [0:0] port_mux_sel_gpio_gpio_v_4_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_04_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_4_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_4_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_4_i_req[PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04] = s_reg2hw.muxed_v_04_mux_sel.q == PAD_MUX_GROUP_MUXED_V_04_SEL_GPIO_IO_V_4 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_4_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_4_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_4_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_4_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_4_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_4_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_4_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_04_SEL_MUXED_V_04: begin
            port_signals_pad2soc_o.gpio.gpio_v_4_i = pads_to_mux_i.muxed_v_04.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_4_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_5_i
  logic [0:0] port_mux_sel_gpio_gpio_v_5_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_05_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_5_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_5_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_5_i_req[PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05] = s_reg2hw.muxed_v_05_mux_sel.q == PAD_MUX_GROUP_MUXED_V_05_SEL_GPIO_IO_V_5 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_5_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_5_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_5_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_5_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_5_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_5_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_5_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_05_SEL_MUXED_V_05: begin
            port_signals_pad2soc_o.gpio.gpio_v_5_i = pads_to_mux_i.muxed_v_05.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_5_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_6_i
  logic [0:0] port_mux_sel_gpio_gpio_v_6_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_06_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_6_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_6_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_6_i_req[PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06] = s_reg2hw.muxed_v_06_mux_sel.q == PAD_MUX_GROUP_MUXED_V_06_SEL_GPIO_IO_V_6 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_6_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_6_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_6_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_6_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_6_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_6_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_6_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_06_SEL_MUXED_V_06: begin
            port_signals_pad2soc_o.gpio.gpio_v_6_i = pads_to_mux_i.muxed_v_06.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_6_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_7_i
  logic [0:0] port_mux_sel_gpio_gpio_v_7_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_07_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_7_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_7_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_7_i_req[PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07] = s_reg2hw.muxed_v_07_mux_sel.q == PAD_MUX_GROUP_MUXED_V_07_SEL_GPIO_IO_V_7 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_7_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_7_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_7_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_7_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_7_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_7_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_7_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_07_SEL_MUXED_V_07: begin
            port_signals_pad2soc_o.gpio.gpio_v_7_i = pads_to_mux_i.muxed_v_07.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_7_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_8_i
  logic [0:0] port_mux_sel_gpio_gpio_v_8_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_08_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_8_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_8_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_8_i_req[PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08] = s_reg2hw.muxed_v_08_mux_sel.q == PAD_MUX_GROUP_MUXED_V_08_SEL_GPIO_IO_V_8 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_8_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_8_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_8_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_8_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_8_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_8_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_8_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_08_SEL_MUXED_V_08: begin
            port_signals_pad2soc_o.gpio.gpio_v_8_i = pads_to_mux_i.muxed_v_08.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_8_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_9_i
  logic [0:0] port_mux_sel_gpio_gpio_v_9_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_09_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_9_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_9_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_9_i_req[PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09] = s_reg2hw.muxed_v_09_mux_sel.q == PAD_MUX_GROUP_MUXED_V_09_SEL_GPIO_IO_V_9 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_9_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_9_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_9_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_9_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_9_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_9_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_9_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_09_SEL_MUXED_V_09: begin
            port_signals_pad2soc_o.gpio.gpio_v_9_i = pads_to_mux_i.muxed_v_09.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_9_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_10_i
  logic [0:0] port_mux_sel_gpio_gpio_v_10_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_10_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_10_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_10_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_10_i_req[PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10] = s_reg2hw.muxed_v_10_mux_sel.q == PAD_MUX_GROUP_MUXED_V_10_SEL_GPIO_IO_V_10 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_10_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_10_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_10_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_10_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_10_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_10_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_10_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_10_SEL_MUXED_V_10: begin
            port_signals_pad2soc_o.gpio.gpio_v_10_i = pads_to_mux_i.muxed_v_10.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_10_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_11_i
  logic [0:0] port_mux_sel_gpio_gpio_v_11_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_11_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_11_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_11_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_11_i_req[PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11] = s_reg2hw.muxed_v_11_mux_sel.q == PAD_MUX_GROUP_MUXED_V_11_SEL_GPIO_IO_V_11 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_11_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_11_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_11_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_11_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_11_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_11_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_11_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_11_SEL_MUXED_V_11: begin
            port_signals_pad2soc_o.gpio.gpio_v_11_i = pads_to_mux_i.muxed_v_11.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_11_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_12_i
  logic [0:0] port_mux_sel_gpio_gpio_v_12_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_12_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_12_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_12_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_12_i_req[PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12] = s_reg2hw.muxed_v_12_mux_sel.q == PAD_MUX_GROUP_MUXED_V_12_SEL_GPIO_IO_V_12 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_12_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_12_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_12_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_12_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_12_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_12_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_12_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_12_SEL_MUXED_V_12: begin
            port_signals_pad2soc_o.gpio.gpio_v_12_i = pads_to_mux_i.muxed_v_12.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_12_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_13_i
  logic [0:0] port_mux_sel_gpio_gpio_v_13_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_13_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_13_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_13_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_13_i_req[PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13] = s_reg2hw.muxed_v_13_mux_sel.q == PAD_MUX_GROUP_MUXED_V_13_SEL_GPIO_IO_V_13 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_13_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_13_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_13_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_13_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_13_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_13_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_13_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_13_SEL_MUXED_V_13: begin
            port_signals_pad2soc_o.gpio.gpio_v_13_i = pads_to_mux_i.muxed_v_13.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_13_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_14_i
  logic [0:0] port_mux_sel_gpio_gpio_v_14_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_14_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_14_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_14_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_14_i_req[PORT_MUX_GROUP_MUXED_V_14_SEL_MUXED_V_14] = s_reg2hw.muxed_v_14_mux_sel.q == PAD_MUX_GROUP_MUXED_V_14_SEL_GPIO_IO_V_14 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_14_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_14_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_14_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_14_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_14_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_14_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_14_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_14_SEL_MUXED_V_14: begin
            port_signals_pad2soc_o.gpio.gpio_v_14_i = pads_to_mux_i.muxed_v_14.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_14_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_15_i
  logic [0:0] port_mux_sel_gpio_gpio_v_15_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_15_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_15_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_15_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_15_i_req[PORT_MUX_GROUP_MUXED_V_15_SEL_MUXED_V_15] = s_reg2hw.muxed_v_15_mux_sel.q == PAD_MUX_GROUP_MUXED_V_15_SEL_GPIO_IO_V_15 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_15_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_15_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_15_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_15_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_15_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_15_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_15_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_15_SEL_MUXED_V_15: begin
            port_signals_pad2soc_o.gpio.gpio_v_15_i = pads_to_mux_i.muxed_v_15.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_15_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_16_i
  logic [0:0] port_mux_sel_gpio_gpio_v_16_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_16_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_16_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_16_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_16_i_req[PORT_MUX_GROUP_MUXED_V_16_SEL_MUXED_V_16] = s_reg2hw.muxed_v_16_mux_sel.q == PAD_MUX_GROUP_MUXED_V_16_SEL_GPIO_IO_V_16 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_16_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_16_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_16_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_16_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_16_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_16_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_16_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_16_SEL_MUXED_V_16: begin
            port_signals_pad2soc_o.gpio.gpio_v_16_i = pads_to_mux_i.muxed_v_16.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_16_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_v_17_i
  logic [0:0] port_mux_sel_gpio_gpio_v_17_i_req;
  logic [PORT_MUX_GROUP_MUXED_V_17_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_v_17_i_arbitrated;
  logic port_mux_sel_gpio_gpio_v_17_i_no_connection;

   assign port_mux_sel_gpio_gpio_v_17_i_req[PORT_MUX_GROUP_MUXED_V_17_SEL_MUXED_V_17] = s_reg2hw.muxed_v_17_mux_sel.q == PAD_MUX_GROUP_MUXED_V_17_SEL_GPIO_IO_V_17 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_v_17_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_v_17_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_v_17_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_v_17_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_v_17_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_v_17_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_v_17_i_arbitrated)
          PORT_MUX_GROUP_MUXED_V_17_SEL_MUXED_V_17: begin
            port_signals_pad2soc_o.gpio.gpio_v_17_i = pads_to_mux_i.muxed_v_17.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_v_17_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_h_0_i
  logic [0:0] port_mux_sel_gpio_gpio_h_0_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_00_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_h_0_i_arbitrated;
  logic port_mux_sel_gpio_gpio_h_0_i_no_connection;

   assign port_mux_sel_gpio_gpio_h_0_i_req[PORT_MUX_GROUP_MUXED_H_00_SEL_MUXED_H_00] = s_reg2hw.muxed_h_00_mux_sel.q == PAD_MUX_GROUP_MUXED_H_00_SEL_GPIO_IO_H_0 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_h_0_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_h_0_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_h_0_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_h_0_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_h_0_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_h_0_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_h_0_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_00_SEL_MUXED_H_00: begin
            port_signals_pad2soc_o.gpio.gpio_h_0_i = pads_to_mux_i.muxed_h_00.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_h_0_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_h_1_i
  logic [0:0] port_mux_sel_gpio_gpio_h_1_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_01_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_h_1_i_arbitrated;
  logic port_mux_sel_gpio_gpio_h_1_i_no_connection;

   assign port_mux_sel_gpio_gpio_h_1_i_req[PORT_MUX_GROUP_MUXED_H_01_SEL_MUXED_H_01] = s_reg2hw.muxed_h_01_mux_sel.q == PAD_MUX_GROUP_MUXED_H_01_SEL_GPIO_IO_H_1 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_h_1_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_h_1_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_h_1_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_h_1_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_h_1_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_h_1_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_h_1_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_01_SEL_MUXED_H_01: begin
            port_signals_pad2soc_o.gpio.gpio_h_1_i = pads_to_mux_i.muxed_h_01.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_h_1_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_h_2_i
  logic [0:0] port_mux_sel_gpio_gpio_h_2_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_02_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_h_2_i_arbitrated;
  logic port_mux_sel_gpio_gpio_h_2_i_no_connection;

   assign port_mux_sel_gpio_gpio_h_2_i_req[PORT_MUX_GROUP_MUXED_H_02_SEL_MUXED_H_02] = s_reg2hw.muxed_h_02_mux_sel.q == PAD_MUX_GROUP_MUXED_H_02_SEL_GPIO_IO_H_2 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_h_2_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_h_2_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_h_2_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_h_2_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_h_2_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_h_2_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_h_2_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_02_SEL_MUXED_H_02: begin
            port_signals_pad2soc_o.gpio.gpio_h_2_i = pads_to_mux_i.muxed_h_02.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_h_2_i = 1'b0;
          end
       endcase
     end
   end


  // Port Signal gpio_h_3_i
  logic [0:0] port_mux_sel_gpio_gpio_h_3_i_req;
  logic [PORT_MUX_GROUP_MUXED_H_03_SEL_WIDTH-1:0] port_mux_sel_gpio_gpio_h_3_i_arbitrated;
  logic port_mux_sel_gpio_gpio_h_3_i_no_connection;

   assign port_mux_sel_gpio_gpio_h_3_i_req[PORT_MUX_GROUP_MUXED_H_03_SEL_MUXED_H_03] = s_reg2hw.muxed_h_03_mux_sel.q == PAD_MUX_GROUP_MUXED_H_03_SEL_GPIO_IO_H_3 ? 1'b1 : 1'b0;

   lzc #(
     .WIDTH(1),
     .MODE(1'b0)
   ) i_port_muxsel_gpio_gpio_h_3_i_arbiter (
     .in_i(port_mux_sel_gpio_gpio_h_3_i_req),
     .cnt_o(port_mux_sel_gpio_gpio_h_3_i_arbitrated),
     .empty_o(port_mux_sel_gpio_gpio_h_3_i_no_connection)
   );

   always_comb begin
     if (port_mux_sel_gpio_gpio_h_3_i_no_connection) begin
        port_signals_pad2soc_o.gpio.gpio_h_3_i = 1'b0;
     end else begin
        unique case (port_mux_sel_gpio_gpio_h_3_i_arbitrated)
          PORT_MUX_GROUP_MUXED_H_03_SEL_MUXED_H_03: begin
            port_signals_pad2soc_o.gpio.gpio_h_3_i = pads_to_mux_i.muxed_h_03.pad2chip;
          end
          default: begin
            port_signals_pad2soc_o.gpio.gpio_h_3_i = 1'b0;
          end
       endcase
     end
   end

endmodule : astral_padframe_periph_muxer
